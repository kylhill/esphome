substitutions:
  device_name: shelly-em
  friendly_name: "Shelly EM"

packages:
  common: !include templates/common.yaml

# Device-specific config
# - https://www.esphome-devices.com/devices/Shelly-EM
# - https://www.esphome-devices.com/devices/Shelly-25
# - https://templates.blakadder.com/shelly_EM.html

esp8266:
  board: esp01_1m

i2c:
  sda: GPIO12
  scl: GPIO14

sensor:
  - platform: ade7953
    # WARNING: Prevent overheating by setting this IRQ pin! - https://esphome.io/components/sensor/ade7953.html
    irq_pin: GPIO13
    voltage:
      name: $friendly_name Voltage
      id: voltage
    current_a:
      name: $friendly_name Phase 1 Current
      id: current_phase_1
    current_b:
      name: $friendly_name Phase 2 Current
      id: current_phase_2
    active_power_a:
      name: $friendly_name Phase 1 Power
      id: power_phase_1
      # Consider calibrating CT clamps, measurements were closer to the stock Shelly EM firmware for me without calibration
      # See: https://community.home-assistant.io/t/anyone-using-shelly-em/149867
      #filters:
      #- lambda: if (x <= 0.0) return 0; else return x * 1.143207411;
    active_power_b:
      name: $friendly_name Phase 2 Power
      id: power_phase_2
      #filters:
      #- lambda: if (x <= 0.0) return 0; else return x * 1.143207411;
    update_interval: 15s

  - platform: template
    name: $friendly_name Total Power
    id: total_power
    state_class: measurement
    device_class: power
    lambda: return id(power_phase_1).state + id(power_phase_2).state;
    update_interval: 15s
    unit_of_measurement: W

  - platform: total_daily_energy
    name: $friendly_name Phase 1 Energy
    id: energy_phase_1
    power_id: power_phase_1
    filters:
      # Multiplication factor from W to kWh is 0.001
      - multiply: 0.001
    unit_of_measurement: kWh

  - platform: total_daily_energy
    name: $friendly_name Phase 2 Energy
    id: energy_phase_2
    power_id: power_phase_2
    filters:
      # Multiplication factor from W to kWh is 0.001
      - multiply: 0.001
    unit_of_measurement: kWh

  - platform: template
    name: $friendly_name Total Energy
    id: total_energy
    state_class: total_increasing
    device_class: energy
    lambda: return id(energy_phase_1).state + id(energy_phase_2).state;
    unit_of_measurement: kWh

  - platform: template
    name: $friendly_name Total Current
    id: total_current
    state_class: measurement
    device_class: current
    lambda: return id(current_phase_1).state + id(current_phase_2).state;
    update_interval: 15s
    unit_of_measurement: A

  - platform: template
    name: $friendly_name Phase 1 Apparent Power
    id: apparent_power_phase_1
    state_class: measurement
    device_class: power
    lambda: return id(current_phase_1).state * id(voltage).state;
    update_interval: 15s
    unit_of_measurement: VA

  - platform: template
    name: $friendly_name Phase 2 Apparent Power
    id: apparent_power_phase_2
    state_class: measurement
    device_class: power
    lambda: return id(current_phase_2).state * id(voltage).state;
    update_interval: 15s
    unit_of_measurement: VA

  - platform: template
    name: $friendly_name Total Apparent Power
    id: apparent_total_power
    state_class: measurement
    device_class: power
    lambda: return id(apparent_power_phase_1).state + id(apparent_power_phase_2).state;
    update_interval: 15s
    unit_of_measurement: VA

  - platform: template
    name: $friendly_name Phase 1 Power Factor
    id: power_factor_phase_1
    state_class: measurement
    device_class: power_factor
    lambda: return id(power_phase_1).state / id(apparent_power_phase_1).state;
    accuracy_decimals: 3
    update_interval: 15s
    unit_of_measurement: "%"

  - platform: template
    name: $friendly_name Phase 2 Power Factor
    id: power_factor_phase_2
    state_class: measurement
    device_class: power_factor
    lambda: return id(power_phase_2).state / id(apparent_power_phase_2).state;
    accuracy_decimals: 3
    update_interval: 15s
    unit_of_measurement: "%"

  - platform: template
    name: $friendly_name Total Power Factor
    id: total_power_factor
    state_class: measurement
    device_class: power_factor
    lambda: return id(total_power).state / id(apparent_total_power).state;
    accuracy_decimals: 3
    update_interval: 15s
    unit_of_measurement: "%"

status_led:
  pin:
    number: GPIO0
    inverted: yes

switch:
  - platform: gpio
    name: $friendly_name Switch
    pin: GPIO15
    id: relay
